Description:
    Matthew Praino / Udacity 

Parameters:
    EnvironmentName:
        Description: An environment that will be prefixed to resource names.
        Type: String
    
    Bucket:
        Default: 'ha-udacity-webapp-deployment'
        Description: 'Bucket containing website files'
        Type: String

    AccessLogsS3Bucket:
        Description: "S3 bucket name to place the log in."
        Type: String
        Default: "ha-udacity-webapp-deployment-logs"

Resources:
  S3AccessIAMRole:
    Type: AWS::IAM::Role
    Properties: 
        AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
            -   Effect: Allow
                Principal:
                    Service:
                    -   ec2.amazonaws.com
                Action:
                -   sts:AssumeRole
        Path: "/" 
  S3AccessIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
        PolicyDocument:
            Statement:
            -   Effect: Allow
                Action:
                -   s3:GetObject*
                Resource: "*"
        PolicyName: S3AccessIAMPolicy
        Roles:
        -   Ref: S3AccessIAMRole
  S3AccessInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
        Path: "/"
        Roles:
        -   Ref: S3AccessIAMRole
  S3AccessBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
        Bucket: !Ref Bucket
        PolicyDocument:
            Statement:
            -   Action:
                -   s3:GetObject
                Effect: Allow
                Principal: '*'
                Resource:
                    Fn::Join: 
                    -   ""
                    - 
                        - "arn:aws:s3:::"
                        - 
                            Ref: "Bucket"
                        -   "/*" 
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          wget -P ../../var/www/html https://ha-udacity-webapp-deployment.s3-us-west-2.amazonaws.com/index.html
      ImageId: ami-06d51e91cea0dac8d
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: t3.small
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue:
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '1'
      MaxSize: '2'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
      - Key: access_logs.s3.enabled
        Value: true 
        Key: access_logs.s3.bucket
        Value: !Ref AccessLogsS3Bucket
      Subnets:
      - Fn::ImportValue: !Sub "{EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "{EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"