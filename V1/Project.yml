Description: >
    Matthew Praino - udacity
    Deploy Webapp using CloudFormation

Parameters:

  EnvironmentName:
      Description: An environment name that will be prefixed to resources
      Type: String
  VpcCIDR:
      Description: Please enter the IP range (CIDR notation) for this VPC
      Type: String
      Default: 10.0.0.0/16
  PrivateSubnet1CIDR:
      Description: Please enter the IP range (CIDR notation) for this private subnet
      Type: String
  PrivateSubnet2CIDR:
      Description: Please enter the IP range (CIDR notation) for this private subnet
      Type: String
  PublicSubnet1CIDR:
      Description: Please enter the IP range (CIDR notation) for this public subnet
      Type: String
  PublicSubnet2CIDR:
      Description: Please enter the IP range (CIDR notation) for this public subnet
      Type: String
  Bucket:
      Default: 'ha-udacity-webapp-deployment'
      Description: 'Bucket containing website files'
      Type: String

Resources:
  VPC:
      Type: AWS::EC2::VPC
      Properties:
          CidrBlock: !Ref VpcCIDR
          EnableDnsSupport: true
          EnableDnsHostnames: true
          Tags:
              - Key: Name
                Value: !Ref EnvironmentName
  InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
          Tags:
              - Key: Name
                Value: !Ref EnvironmentName

  InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
          VpcId: !Ref VPC
          InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [0, !GetAZs '']
          CidrBlock: !Ref PublicSubnet1CIDR
          MapPublicIpOnLaunch: true
          Tags:
          -   Key: Name
              Value: !Sub Public ${PublicSubnet1CIDR}
          -   Key: CloudFormationStack
              Value: !Ref AWS::StackId
          VpcId: !Ref VPC
  PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [1, !GetAZs '']
          CidrBlock: !Ref PublicSubnet2CIDR
          MapPublicIpOnLaunch: true
          Tags:
          -   Key: Name
              Value: !Sub Public ${PublicSubnet2CIDR}
          -   Key: CloudFormationStack
              Value: !Ref AWS::StackId
          VpcId: !Ref VPC

  PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [0, !GetAZs '']
          CidrBlock: !Ref PrivateSubnet1CIDR
          MapPublicIpOnLaunch: false
          Tags:
          -   Key: Name
              Value: !Sub Private ${PrivateSubnet1CIDR}
          -   Key: CloudFormationStack
              Value: !Ref AWS::StackId
          VpcId: !Ref VPC
  PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [1, !GetAZs '']
          CidrBlock: !Ref PrivateSubnet2CIDR
          MapPublicIpOnLaunch: false
          Tags:
          -   Key: Name
              Value: !Sub Private ${PrivateSubnet2CIDR}
          -   Key: CloudFormationStack
              Value: !Ref AWS::StackId
          VpcId: !Ref VPC

  NatGateway1EIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties:
          Domain: vpc

  NatGateway2EIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties:
          Domain: vpc

  NatGateway1:
      Type: AWS::EC2::NatGateway
      Properties:
          AllocationId: !GetAtt NatGateway1EIP.AllocationId
          SubnetId: !Ref PublicSubnet1

  NatGateway2:
      Type: AWS::EC2::NatGateway
      Properties:
          AllocationId: !GetAtt NatGateway2EIP.AllocationId
          SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties: 
          VpcId: !Ref VPC
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties: 
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties: 
          VpcId: !Ref VPC
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref PrivateRouteTable1
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PrivateRouteTable1
          SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
      Type: AWS::EC2::RouteTable
      Properties: 
          VpcId: !Ref VPC
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  DefaultPrivateRoute2:
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref PrivateRouteTable2
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PrivateRouteTable2
          SubnetId: !Ref PrivateSubnet2
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          systemctl enable apache2.service
          cd /var/www/html
          aws s3 cp s3://udacityiacproject/Udacity.zip
          unzip -o Udacity.zip
          wget -P../../var/www/html https://ha-udacity-webapp-deployment.s3-us-west-2.amazonaws.com/index.html
      ImageId: ami-06d51e91cea0dac8d
      IamInstanceProfile: arn:aws:iam::292152339671:role/udacityproject2-S3AccessIAMRole-1HHJ5T3ZCUANR
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: t3.small
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - full_s3_access_from_EC2
  S3AccessIAMRole:
    Type: AWS::IAM::Role
    Properties: 
        AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
            -   Effect: Allow
                Principal:
                    Service:
                    -   ec2.amazonaws.com
                Action:
                -   sts:AssumeRole
        Path: "/"
  S3AccessIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
        PolicyDocument:
            Statement:
            -   Effect: Allow
                Action:
                -   s3:GetObject*
                Resource: "*"
        PolicyName: S3AccessIAMPolicy
        Roles:
        -   Ref: S3AccessIAMRole
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '2'
      MaxSize: '2'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      -   Ref: PublicSubnet1
      -   Ref: PublicSubnet2
      SecurityGroups:
      - Ref: LBSecGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC

Outputs:
  # Network related Outputs
  VPCID:
      Description: VPCID of the newly created VPC
      Value: !Ref VPC
      Export:
          Name: !Sub ${EnvironmentName}-VPCID
  
  # NAT related Outputs
  NatGateway1:
      Description: NAT gateway instance
      Value: !Ref NatGateway1
  NatGateway2:
      Description: NAT gateway instance
      Value: !Ref NatGateway2
  EIPAddress1:
      Description: EIP allocated to NAT gateway
      Value: !Ref NatGateway1EIP
  EIPAddress2:
      Description: EIP allocated to NAT gateway
      Value: !Ref NatGateway2EIP
  
  # Subnet related Outputs
  PublicSubnets:
      Description: A list of the public subnets in the project
      Value: !Join [ ",",  [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
      Export:
          Name: !Sub ${EnvironmentName}-PUB-NETS
  PublicSubnet1:
      Description: SubnetId of the public subnet
      Value: !Ref PublicSubnet1
      Export:
          Name: !Sub ${EnvironmentName}-PUB1-SN
  PublicSubnet2:
      Description: SubnetId of the public subnet
      Value: !Ref PublicSubnet2
      Export:
          Name: !Sub ${EnvironmentName}-PUB2-SN
  PrivateSubnets:
      Description: A list of the private subnets in the project
      Value: !Join [ ",",  [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
      Export:
          Name: !Sub ${EnvironmentName}-PRI-NETS
  PrivateSubnet1:
      Description: SubnetId of the public subnet
      Value: !Ref PrivateSubnet1
  PrivateSubnet2:
      Description: SubnetId of the public subnet
      Value: !Ref PrivateSubnet2
  PublicSubnet1RouteTableAssociation:
      Description: PublicRouteTable
      Value: !Ref PublicSubnet1RouteTableAssociation
  PublicSubnet2RouteTableAssociation:
      Description: PublicRouteTable
      Value: !Ref PublicSubnet2RouteTableAssociation
  PrivateSubnet1RouteTableAssociation:
      Description: PrivateRouteTable1
      Value: !Ref PrivateSubnet1RouteTableAssociation
  PrivateSubnet2RouteTableAssociation:
      Description: PrivateRouteTable2
      Value: !Ref PrivateSubnet2RouteTableAssociation
  WebServerSecGroup:
      Description: SecurityGroup for instances in private subnet
      Value: !Ref WebServerSecGroup